function [params] = getBipedParamsImplicitRec()
%UNTITLED3 Summary of this function goes here
%   Detailed explanation goes here

params = getBipedParamsImplicit();
%For backwards recursion
E=[0     0     0     0     0     0     0     0     0     0     0     0;...
   0     0     0     0     0     0     0     0     0     0     0     0;...
   0     0     0     0     0     0     0     0     0     0     0     0;...
   0     0     0     0     0     0     0     0     0     0     0     0;...
   0     0     0     0     0     0     0     0     0     0     0     0;...
   0     0     0     0     0     0     0     0     0     0     0     0;...
   0     0     0     0     0     0     0     0     0     0     0     0;...
   0     0     0     0     0     0     0     0     0     0     0     0];

FH=[0   -1    -1     params.mu     0     0     0     0     0     0     0     0;...
    1    0     0     0      0     0     0     0     0     0     0     0;...
    1    0     0     0      0     0     0     0     0     0     0     0;...
    0    0     0     0      0     0     0     0     0     0     0     0;...
    0    0     0     0      0    -1    -1     params.mu     0    0     0     0;...
    0    0     0     0      1     0     0     0     0     0     0     0;...
    0    0     0     0      1     0     0     0     0     0     0     0;...
    0    0     0     0      0     0     0     0     0     0     0     0];

params.Borth = [E, FH]; % q = Ex + F lambda + H u


params.Borth = [E, FH]; % q = Ex + F lambda + H u
%params.Borth(:, [11, 12]) = eye(params.orthDim);
params.borth = zeros(params.orthDim, 1);

%Constraint Adelta_delta * Delta + Adelta_int * int >= bdelta
params.Adelta_delta = [params.Aorth; params.Borth; params.Aorth; -params.Aorth; params.Borth; - params.Borth];

params.Adelta_int = [zeros(params.orthDim);...  %%Aorth * Z + aorth >= 0
    zeros(params.orthDim);...  %%Borth * Z + borth >= 0
    params.M * eye(params.orthDim);... % - M*i <= Aorth * Z + aorth
    params.M * eye(params.orthDim);... % Aorth * Z  + aorth <= + M*i 
    -params.M * eye(params.orthDim);... % -M*(1-i) <= Borth * Z + borth
    -params.M * eye(params.orthDim)]; % Borth * Z + borth <= M*(1-i)

params.bdelta = [- params.aorth; - params.borth; - params.aorth; params.aorth; - params.M * ones(params.orthDim, 1) - params.borth; - params.M * ones(params.orthDim, 1) + params.borth];

end